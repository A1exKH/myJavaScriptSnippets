#include "myString.h"
#include <iostream>
#include <cstring>
#include <fstream>
using namespace std;

/*
Task4
14. Длина L кратна 4-м, то выделяется подстрока после последнего пробела;

Общая постановка. Пользовательский класс String должен содержать необходимые элементы-данные, которые
создаются в динамической области памяти.

Конструктор для создания строк: String (…);

Деструктор: ~String();

Метод ввода исходной строки: Set();

Метод печати: void print(…);

Код методов  – вне пространства определения класса. Программа иллюстрирует прямой и косвенный способы
обращения к методам.

Ввести с клавиатуры строку  символов S1. Признак окончания ввода строки - нажатие клавиши "Ввод". Программа
должна содержать перегруженную операцию «=», использование которой скопирует S1 в S2 .

Исходную и преобразованную строки вывести в файл.
*/

void myString::New( const char *str ){
    int size = strlen(str);
    m_Str = new char[size+1]; // массив для строки символов
    L = size; // длинна строки
    strcpy( m_Str, str ); // копируем строку
}
void myString::Del(){
    delete [] m_Str;
  ;
}

myString::myString(){ New("\0"); }
myString::myString(const char *str){ New(str); }
myString::myString(const myString &str){ New(str.m_Str); }
myString::~myString(){ Del(); }

void myString::Print(){
  cout<<"Your string:"<<endl<<m_Str<<endl;
}
void myString::Set(){
    Del();
    cout<<"Enter your string:"<<endl;
    char tmp[1000];
    cin.getline( tmp, 1000 );
    cin.sync();
    New(tmp);
}
void myString::ofile(char *str){
  ofstream file;
  file.open(str,ios::app);
  file<<m_Str<<endl;
  file.close();
}
myString & myString::operator =(const myString &str){
    int j=0;
    int position=0;
    int i;
    Del();

    if (str.L%4==0) {
        char *tmp=new char[str.L];
        for (i=str.L;i!=0;i--){
            if((int)str.m_Str[i]==32) {
                position=++i;
                break;
            }
        }
        for (i=position;i<str.L;i++){
            tmp[j]=str.m_Str[i];
            j++;
        }
        tmp[j]='\0';
        New(tmp);
        cout<<"Your string after processing:"<<endl<<tmp<<endl;
        delete [] tmp;
        return *this;
    }
    else{
        New(str.m_Str);
        cout<<"Your string after processing:"<<endl<<str.m_Str<<endl;
        return *this;
    }
};


int main(){

    char fileName[]="log.txt";

    myString s1, s2;
    s1.Set();
    s1.Print();
    s1.ofile(fileName);
    s2 = s1;
    s2.ofile(fileName);
    getchar();
    return 0;
}
